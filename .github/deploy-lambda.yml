name: 🚀 Deploy ML Model to AWS Lambda

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'models/**'
      - 'requirements.txt'
      - 'Dockerfile*'
      - '.github/workflows/deploy-lambda.yml'
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: churn-model-lambda
  LAMBDA_FUNCTION_NAME: churn-model-predictor

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🏃‍♂️ Run training pipeline
        run: |
          python src/train.py

      - name: 🔍 Run tests
        run: |
          pytest tests/ -v

  build-and-deploy:
    name: 🏗️ Build & Deploy to Lambda
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏃‍♂️ Pre-build model training
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python src/train.py

      - name: 🔐 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build Docker image for Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Lambda-compatible Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: 🚀 Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: 🎯 Create or Update Lambda function
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Check if Lambda function exists
          if aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null; then
            echo "📝 Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name $LAMBDA_FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # Wait for update to complete
            aws lambda wait function-updated \
              --function-name $LAMBDA_FUNCTION_NAME
          else
            echo "🆕 Creating new Lambda function..."
            
            # Create execution role if it doesn't exist
            ROLE_ARN=$(aws iam get-role --role-name lambda-execution-role --query 'Role.Arn' --output text 2>/dev/null || echo "")
            
            if [ -z "$ROLE_ARN" ]; then
              echo "🔑 Creating Lambda execution role..."
              aws iam create-role \
                --role-name lambda-execution-role \
                --assume-role-policy-document '{
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "lambda.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                  ]
                }'
              
              aws iam attach-role-policy \
                --role-name lambda-execution-role \
                --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              
              # Wait for role to be created
              sleep 10
              ROLE_ARN=$(aws iam get-role --role-name lambda-execution-role --query 'Role.Arn' --output text)
            fi
            
            # Create Lambda function
            aws lambda create-function \
              --function-name $LAMBDA_FUNCTION_NAME \
              --package-type Image \
              --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              --role $ROLE_ARN \
              --timeout 60 \
              --memory-size 1024 \
              --description "ML Churn Prediction Model deployed via GitHub Actions"
          fi

      - name: 🔧 Configure Lambda settings
        run: |
          # Update function configuration
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --timeout 60 \
            --memory-size 1024 \
            --environment Variables='{
              "MODEL_PATH": "/var/task/models/model.pkl",
              "MODEL_COLUMNS_PATH": "/var/task/models/model_columns.pkl"
            }'

      - name: 🧪 Test Lambda function
        run: |
          echo "🔍 Testing Lambda function..."
          aws lambda invoke \
            --function-name $LAMBDA_FUNCTION_NAME \
            --payload '{
              "body": "{\"Geography\": \"France\", \"Gender\": \"Female\", \"Age\": 42, \"CreditScore\": 600, \"Tenure\": 3, \"Balance\": 0.0, \"EstimatedSalary\": 50000, \"NumOfProducts\": 1, \"HasCrCard\": 1, \"IsActiveMember\": 1}"
            }' \
            response.json
          
          echo "📋 Lambda response:"
          cat response.json

      - name: 📊 Output deployment info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🐳 Docker Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "⚡ Lambda Function: $LAMBDA_FUNCTION_NAME"
          echo "🌐 Region: $AWS_REGION"
          
          # Get Lambda function URL if it exists
          FUNCTION_URL=$(aws lambda get-function-url-config --function-name $LAMBDA_FUNCTION_NAME --query 'FunctionUrl' --output text 2>/dev/null || echo "Not configured")
          echo "🔗 Function URL: $FUNCTION_URL" 